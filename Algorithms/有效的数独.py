#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 25 16:42:55 2018

@author: pineapple
"""

'''
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。
'''


'''
我的：　时间复杂度O(n^4) 空间复杂度O(n)
思路：根据数独的规则，写出三个判定条件：
１．数独行必须不重复
２．数独列必须不重复
３．数独９个块不许不重复

这里用了辅助函数find来判断board上每个点是否满足三个条件

'''
class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        for r in range(9):
            for c in range(9):
                if not self.find(board, r, c):
                    return False
        return True
                
    def find(self, board, x, y):
        if board[x][y] == '.':
            return True

        xrem = x // 3
        yrem = y // 3
        
        row = board[x]
        col = [board[i][y] for i in range(9)]
        
        left = xrem * 3
        right = xrem * 3 + 3
        top = yrem * 3
        bottom = yrem * 3 + 3
        
        block = []
        for i in range(left, right):
            for j in range(top, bottom):
                block.append(board[i][j])
        if row.count(board[x][y]) > 1 or col.count(board[x][y]) > 1 or block.count(board[x][y]) > 1:
            return False
        return True